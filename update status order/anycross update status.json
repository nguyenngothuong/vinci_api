{"name":"api update stasus đơn hàng","version":"2.0","sourceType":"self","structure":[{"id":"webhook-trigger-1","type":"trigger","subSteps":null},{"id":"script-1","type":"normal","subSteps":null},{"id":"branch-1","type":"branch_exclusive_parent","subSteps":[{"id":"branch-1.child-2","type":"branch_exclusive_child","subSteps":[{"id":"bitable-2","type":"normal","subSteps":null},{"id":"script-3","type":"normal","subSteps":null},{"id":"bitable-3","type":"normal","subSteps":null},{"id":"await-webhook-trigger-1","type":"normal","subSteps":null}]},{"id":"branch-1.default","type":"branch_exclusive_child","subSteps":[{"id":"await-webhook-trigger-2","type":"normal","subSteps":null}]}]}],"steps":[{"id":"webhook-trigger-1","type":"trigger","operation":{"connectorId":"7270411537485938693","connectorName":"webhook-trigger","connectorVersion":"1.5","operationId":"7270411537540497413","operationName":"await_webhook_trigger"},"name":"Webhook Trigger","description":"","auth":{"key":"","parameters":null,"credentials":{"type":"cred","value":""}},"parameters":{"webhook":{"type":"string","value":"https://open.larksuite.com/anycross/trigger/callback/MjBjYTZiZGVmOTg3ZGY1YjA3YmRiMzJhYTRiOWI4NTkw"},"body_type":{"type":"string","value":"json"},"authorization_config":{"type":"object","value":{"user_name":{"type":"string","value":"admin"},"password":{"value":"Kh~f_i9K^ywS9;k(","type":"string"},"authorization_method":{"value":1,"type":"number"},"ip_white_list":{"value":"","type":"string"}}},"timeout":{"type":"number","value":60000}},"dynamicSchema":"{\"optionMap\":{\"authorization_config.authorization_method\":{\"1\":\"HTTP Basic Auth\"}}}"},{"id":"script-1","type":"normal","operation":{"connectorId":"7296760306577965062","connectorName":"script","connectorVersion":"2.0","operationId":"7296760306603212805","operationName":"execute_script"},"name":"validate_batch_update","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":{"input":{"type":"spel","value":{"node_tree":{"path":"$.webhook-trigger-1.body.data","t":"json_path"},"expression":"_(\"$.webhook-trigger-1.body.data\")"}},"js_code":{"type":"string","value":"/**\n * Validate Batch Update Input\n * --------------------------------\n * Kiểm tra và xác thực dữ liệu đầu vào cho API cập nhật hàng loạt trạng thái đơn hàng\n *\n * Input: Object chứa dữ liệu cập nhật từ người dùng\n * Output: Object chứa kết quả xác thực và dữ liệu đã được làm sạch\n */\n\nfunction handler(input) {\n  const response = {\n    success: true,\n    message: 'Dữ liệu hợp lệ',\n    data: {},\n    errors: [],\n  };\n\n  // Danh sách các trạng thái đơn hàng hợp lệ\n  const VALID_STATUSES = [\n    'Nhận đơn',\n    'Xử lý',\n    'Đã giao',\n    'Đã huỷ',\n    'Đang giao',\n    'Xuất kho',\n  ];\n\n  try {\n    // 1. Kiểm tra cấu trúc chính của input\n    if (\n      !input ||\n      typeof input !==\n        'object'\n    ) {\n      response.errors.push(\n        'Dữ liệu đầu vào không hợp lệ'\n      );\n      response.success = false;\n      response.message =\n        'Dữ liệu không hợp lệ';\n      return response;\n    }\n\n    // 2. Kiểm tra và trích xuất danh sách đơn hàng\n    if (!input.orders) {\n      response.errors.push(\n        'Thiếu danh sách đơn hàng (orders)'\n      );\n    } else if (\n      !Array.isArray(\n        input.orders\n      )\n    ) {\n      response.errors.push(\n        'orders phải là một mảng'\n      );\n    } else if (\n      input.orders.length ===\n      0\n    ) {\n      response.errors.push(\n        'Danh sách đơn hàng không được để trống'\n      );\n    } else {\n      // Mảng chứa các đơn hàng đã được xác thực\n      const validatedOrders =\n        [];\n\n      // Kiểm tra từng đơn hàng trong danh sách\n      input.orders.forEach(\n        (order, index) =\u003e {\n          const orderErrors =\n            [];\n\n          // Kiểm tra order_code\n          if (\n            !order.order_code\n          ) {\n            orderErrors.push(\n              `orders[${index}]: Thiếu order_code`\n            );\n          } else if (\n            typeof order.order_code !==\n            'string'\n          ) {\n            orderErrors.push(\n              `orders[${index}]: order_code phải là chuỗi`\n            );\n          } else if (\n            !order.order_code.startsWith(\n              'DH'\n            )\n          ) {\n            orderErrors.push(\n              `orders[${index}]: order_code phải bắt đầu bằng \"DH\"`\n            );\n          }\n\n          // Kiểm tra status\n          if (!order.status) {\n            orderErrors.push(\n              `orders[${index}]: Thiếu status`\n            );\n          } else if (\n            typeof order.status !==\n            'string'\n          ) {\n            orderErrors.push(\n              `orders[${index}]: status phải là chuỗi`\n            );\n          } else if (\n            !VALID_STATUSES.includes(\n              order.status\n            )\n          ) {\n            orderErrors.push(\n              `orders[${index}]: status không hợp lệ. Các giá trị hợp lệ: ${VALID_STATUSES.join(\n                ', '\n              )}`\n            );\n          }\n\n          // Nếu không có lỗi, thêm vào danh sách đơn hàng hợp lệ\n          if (\n            orderErrors.length ===\n            0\n          ) {\n            validatedOrders.push(\n              {\n                order_code:\n                  order.order_code,\n                status:\n                  order.status,\n              }\n            );\n          } else {\n            // Thêm các lỗi vào danh sách lỗi chung\n            response.errors =\n              [\n                ...response.errors,\n                ...orderErrors,\n              ];\n          }\n        }\n      );\n\n      // Lưu danh sách đơn hàng đã được xác thực\n      response.data.orders =\n        validatedOrders;\n    }\n\n    // 3. Kiểm tra số lượng đơn hàng hợp lệ\n    if (\n      response.data.orders \u0026\u0026\n      response.data.orders\n        .length === 0\n    ) {\n      response.errors.push(\n        'Không có đơn hàng nào hợp lệ để cập nhật'\n      );\n    }\n\n    // 4. Kiểm tra số lượng đơn hàng tối đa\n    if (\n      response.data.orders \u0026\u0026\n      response.data.orders\n        .length \u003e 100\n    ) {\n      response.errors.push(\n        'Số lượng đơn hàng vượt quá giới hạn (tối đa 100 đơn hàng mỗi lần cập nhật)'\n      );\n    }\n\n    // 5. Kiểm tra trùng lặp order_code\n    if (\n      response.data.orders \u0026\u0026\n      response.data.orders\n        .length \u003e 0\n    ) {\n      const orderCodes =\n        response.data.orders.map(\n          (order) =\u003e\n            order.order_code\n        );\n      const uniqueOrderCodes =\n        [\n          ...new Set(\n            orderCodes\n          ),\n        ];\n\n      if (\n        orderCodes.length !==\n        uniqueOrderCodes.length\n      ) {\n        response.errors.push(\n          'Có mã đơn hàng bị trùng lặp trong danh sách'\n        );\n\n        // Tìm các mã đơn hàng bị trùng lặp\n        const duplicates =\n          orderCodes.filter(\n            (item, index) =\u003e\n              orderCodes.indexOf(\n                item\n              ) !== index\n          );\n        response.errors.push(\n          `Các mã đơn hàng bị trùng: ${[\n            ...new Set(\n              duplicates\n            ),\n          ].join(', ')}`\n        );\n      }\n    }\n\n    // Cập nhật trạng thái success dựa trên số lượng lỗi\n    if (\n      response.errors.length \u003e\n      0\n    ) {\n      response.success = false;\n      response.message =\n        'Dữ liệu không hợp lệ';\n    } else {\n      // Thêm thông tin tổng hợp\n      response.data.total =\n        response.data.orders.length;\n      response.message = `Dữ liệu hợp lệ. Sẵn sàng cập nhật ${response.data.total} đơn hàng.`;\n\n      // 6. Tạo filter để tìm đơn hàng trong Larkbase\n      const filter = {\n        conjunction: 'or',\n        conditions:\n          response.data.orders.map(\n            (order) =\u003e ({\n              field_name:\n                'order_code',\n              operator: 'is',\n              value: [\n                order.order_code,\n              ],\n            })\n          ),\n      };\n\n      // Thêm filter vào response\n      response.data.filter =\n        filter;\n    }\n  } catch (error) {\n    response.success = false;\n    response.message =\n      'Lỗi xử lý dữ liệu';\n    response.errors.push(\n      error.message\n    );\n  }\n\n  return response;\n}\n"}},"errorHandler":{"defaultStrategy":{"id":"script-1.error_handler.default","name":"","action":"retry","retryFallbackAction":"terminate"}}},{"id":"branch-1","type":"branch_exclusive_parent","operation":{"connectorId":"branch","connectorName":"branch","connectorVersion":"0.0.1","operationId":"branch_exclusive","operationName":"Exclusive branch"},"name":"Branch","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":{"branches":{"type":"object","value":{"branch-1.child-2":{"value":{"conditions":{"type":"array","value":[{"comparison":{"type":"object","value":{"left":{"value":{"node_tree":{"t":"json_path","path":"$.script-1.result.success"},"expression":"_(\"$.script-1.result.success\")"},"type":"spel"}}},"operator":{"type":"string","value":"isTrue"}}]},"label":{"type":"string","value":"Branch 1"},"operator":{"type":"string","value":"and"}},"type":"object"}}},"maxSize":{"type":"number","value":1}}},{"id":"branch-1.child-2","type":"branch_exclusive_child","operation":{},"name":"","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":null},{"id":"bitable-2","type":"normal","operation":{"connectorId":"7423607819766611973","connectorName":"bitable","connectorVersion":"2.5","operationId":"7423607819976458246"},"name":"search_record_by_order_code","description":"","auth":{"key":"","parameters":null,"credentials":{"type":"cred","value":"R0RA0KNYn00mr"}},"parameters":{"filter":{"type":"spel","value":{"expression":"_(\"$.script-1.result.data.filter\")","node_tree":{"t":"json_path","path":"$.script-1.result.data.filter"}}},"app_token":{"type":"string","value":"GfbhbWshba8es4s8wQQuq65hspe"},"table_id":{"type":"string","value":"tblaDDCyz7suvc4N"},"user_id_type":{"type":"string","value":"open_id"},"page_size":{"type":"number","value":500},"field_names":{"type":"spel","value":{"expression":"{\"Trạng thái đơn\",\"order_code\"}","node_tree":{"t":"inline_list","items":[{"vt":"string","v":"\"Trạng thái đơn\"","t":"literal"},{"vt":"string","v":"\"order_code\"","t":"literal"}]}}}},"dynamicSchema":"{\"optionMap\":{\"filter.conjunction\":{\"or\":\"meeting any of the conditions\"},\"filter.conditions.0.operator\":{\"is\":\"is\"},\"filter.conditions.1.operator\":{\"is\":\"is\"}}}","errorHandler":{"defaultStrategy":{"id":"bitable-2.error_handler.default","name":"","retryFallbackAction":"terminate","action":"ignore"},"strategies":[]}},{"id":"script-3","type":"normal","operation":{"connectorId":"7296760306577965062","connectorName":"script","connectorVersion":"2.0","operationId":"7296760306603212805","operationName":"execute_script"},"name":"prepare_batch_update","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":{"js_code":{"type":"string","value":"/**\n * Prepare Batch Update\n * --------------------------------\n * Chuẩn bị dữ liệu cho việc cập nhật hàng loạt trạng thái đơn hàng\n *\n * Input: Object chứa old_data (dữ liệu hiện tại) và new_data (dữ liệu cập nhật)\n * Output: Object chứa dữ liệu đã được định dạng để cập nhật vào Larkbase\n */\n\nfunction handler(input) {\n  const response = {\n    success: true,\n    message:\n      'Dữ liệu đã được chuẩn bị thành công',\n    data: {\n      records: [],\n    },\n    errors: [],\n    stats: {\n      total: 0,\n      matched: 0,\n      unmatched: 0,\n    },\n  };\n\n  try {\n    // Kiểm tra cấu trúc input\n    if (\n      !input ||\n      !input.old_data ||\n      !input.new_data\n    ) {\n      response.success = false;\n      response.message =\n        'Dữ liệu đầu vào không hợp lệ';\n      response.errors.push(\n        'Thiếu old_data hoặc new_data'\n      );\n      return response;\n    }\n\n    if (\n      !Array.isArray(\n        input.old_data\n      ) ||\n      !Array.isArray(\n        input.new_data\n      )\n    ) {\n      response.success = false;\n      response.message =\n        'old_data và new_data phải là mảng';\n      response.errors.push(\n        'Định dạng dữ liệu không hợp lệ'\n      );\n      return response;\n    }\n\n    // Tạo map từ old_data để dễ dàng tìm kiếm theo order_code\n    const oldDataMap =\n      new Map();\n\n    input.old_data.forEach(\n      (record) =\u003e {\n        // Trích xuất order_code từ cấu trúc phức tạp\n        let orderCode = null;\n\n        if (\n          record.fields \u0026\u0026\n          record.fields\n            .order_code\n        ) {\n          const orderCodeField =\n            record.fields\n              .order_code;\n\n          if (\n            orderCodeField.type ===\n              1 \u0026\u0026\n            Array.isArray(\n              orderCodeField.value\n            ) \u0026\u0026\n            orderCodeField\n              .value.length \u003e\n              0 \u0026\u0026\n            orderCodeField\n              .value[0].text\n          ) {\n            orderCode =\n              orderCodeField\n                .value[0]\n                .text;\n          }\n        }\n\n        if (orderCode) {\n          oldDataMap.set(\n            orderCode,\n            {\n              record_id:\n                record.record_id,\n              current_status:\n                record.fields[\n                  'Trạng thái đơn'\n                ] || null,\n            }\n          );\n        }\n      }\n    );\n\n    // Thống kê\n    response.stats.total =\n      input.new_data.length;\n\n    // Xử lý từng record trong new_data\n    input.new_data.forEach(\n      (newRecord) =\u003e {\n        const orderCode =\n          newRecord.order_code;\n        const newStatus =\n          newRecord.status;\n\n        // Tìm record tương ứng trong old_data\n        if (\n          oldDataMap.has(\n            orderCode\n          )\n        ) {\n          const oldRecord =\n            oldDataMap.get(\n              orderCode\n            );\n\n          // Tạo record để cập nhật\n          const updateRecord =\n            {\n              record_id:\n                oldRecord.record_id,\n              fields: {\n                'Trạng thái đơn':\n                  newStatus,\n              },\n            };\n\n          // Thêm vào danh sách records cần cập nhật\n          response.data.records.push(\n            updateRecord\n          );\n          response.stats\n            .matched++;\n\n          // Ghi lại thông tin thay đổi trạng thái\n          if (\n            oldRecord.current_status !==\n            newStatus\n          ) {\n            if (\n              !response.data\n                .status_changes\n            ) {\n              response.data.status_changes =\n                [];\n            }\n\n            response.data.status_changes.push(\n              {\n                order_code:\n                  orderCode,\n                record_id:\n                  oldRecord.record_id,\n                previous_status:\n                  oldRecord.current_status,\n                new_status:\n                  newStatus,\n              }\n            );\n          }\n        } else {\n          // Không tìm thấy record tương ứng\n          response.stats\n            .unmatched++;\n          response.errors.push(\n            `Không tìm thấy đơn hàng có mã: ${orderCode}`\n          );\n        }\n      }\n    );\n\n    // Cập nhật thông báo dựa trên kết quả\n    if (\n      response.stats\n        .matched === 0\n    ) {\n      response.success = false;\n      response.message =\n        'Không tìm thấy đơn hàng nào để cập nhật';\n    } else if (\n      response.stats\n        .unmatched \u003e 0\n    ) {\n      response.message = `Đã tìm thấy ${response.stats.matched}/${response.stats.total} đơn hàng để cập nhật`;\n    } else {\n      response.message = `Đã chuẩn bị cập nhật ${response.stats.matched} đơn hàng`;\n    }\n  } catch (error) {\n    response.success = false;\n    response.message =\n      'Lỗi xử lý dữ liệu';\n    response.errors.push(\n      error.message\n    );\n  }\n\n  return response;\n}\n"},"input":{"type":"object","value":{"new_data":{"type":"spel","value":{"node_tree":{"path":"$.script-1.result.data.orders","t":"json_path"},"expression":"_(\"$.script-1.result.data.orders\")"}},"old_data":{"type":"spel","value":{"expression":"_(\"$.bitable-2.data.items\")","node_tree":{"t":"json_path","path":"$.bitable-2.data.items"}}}}}},"errorHandler":{"defaultStrategy":{"name":"","action":"retry","retryFallbackAction":"terminate","id":"script-3.error_handler.default"}}},{"id":"bitable-3","type":"normal","operation":{"connectorId":"7423607819766611973","connectorName":"bitable","connectorVersion":"2.5","operationId":"7423607819976327174"},"name":"batch_update_records","description":"","auth":{"key":"","parameters":null,"credentials":{"type":"cred","value":"R0RA0KNYn00mr"}},"parameters":{"app_token":{"type":"string","value":"GfbhbWshba8es4s8wQQuq65hspe"},"table_id":{"type":"string","value":"tblaDDCyz7suvc4N"},"records":{"type":"spel","value":{"node_tree":{"t":"json_path","path":"$.script-3.result.data.records"},"expression":"_(\"$.script-3.result.data.records\")"}},"user_id_type":{"type":"string","value":"open_id"},"ignore_consistency_check":{"type":"boolean","value":false}},"errorHandler":{"defaultStrategy":{"id":"bitable-3.error_handler.default","name":"","action":"ignore","retryFallbackAction":"terminate"},"strategies":[]}},{"id":"await-webhook-trigger-1","type":"normal","operation":{"connectorId":"7439571426669002758","connectorName":"await-webhook-trigger","connectorVersion":"1.3","operationId":"7439571426677358598","operationName":"await_callback"},"name":"Synchronous Callback","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":{"flow_key":{"type":"spel","value":{"expression":"_(\"$.webhook-trigger-1.flow_key\")","node_tree":{"t":"json_path","path":"$.webhook-trigger-1.flow_key"}}},"status":{"type":"number","value":200},"body":{"type":"object","value":{"msg":{"value":{"expression":"_(\"$.bitable-3.msg\")","node_tree":{"path":"$.bitable-3.msg","t":"json_path"}},"type":"spel"},"data":{"type":"spel","value":{"expression":"_(\"$.bitable-3.data\")","node_tree":{"path":"$.bitable-3.data","t":"json_path"}}},"error":{"type":"spel","value":{"expression":"_(\"$.bitable-3.error\") ?: null","node_tree":{"backup":{"t":"literal","vt":"null","v":"null"},"t":"elvis","subject":{"t":"json_path","path":"$.bitable-3.error"}}}}}},"headers":{"type":"array","value":[]}},"errorHandler":{"defaultStrategy":{"action":"terminate","id":"await-webhook-trigger-1.error_handler.default","name":""}}},{"id":"branch-1.default","type":"branch_exclusive_child","operation":{},"name":"","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":null},{"id":"await-webhook-trigger-2","type":"normal","operation":{"connectorId":"7439571426669002758","connectorName":"await-webhook-trigger","connectorVersion":"1.3","operationId":"7439571426677358598","operationName":"await_callback"},"name":"Synchronous Callback","description":"","auth":{"key":"","parameters":null,"credentials":null},"parameters":{"flow_key":{"type":"spel","value":{"node_tree":{"t":"json_path","path":"$.webhook-trigger-1.flow_key"},"expression":"_(\"$.webhook-trigger-1.flow_key\")"}},"status":{"type":"number","value":200},"body":{"type":"object","value":{"success":{"value":false,"type":"boolean"},"message":{"value":{"expression":"_(\"$.script-1.result.message\")","node_tree":{"path":"$.script-1.result.message","t":"json_path"}},"type":"spel"},"errors":{"type":"spel","value":{"expression":"_(\"$.script-1.result.errors\")","node_tree":{"path":"$.script-1.result.errors","t":"json_path"}}}}}},"errorHandler":{"defaultStrategy":{"name":"","action":"terminate","id":"await-webhook-trigger-2.error_handler.default"}}}]}